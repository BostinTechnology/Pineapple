#!/usr/bin/env python3
"""

"""

import unittest
from unittest.mock import patch
from unittest.mock import MagicMock
from unittest.mock import call
import importlib
import logging
import logging.config
import dict_LoggingSetup
import subprocess

#BUG: If this program is in the test directory, it doesn't find this import
from i_cog_Ls_1 import iCog

class TestiCogInit(unittest.TestCase):
    """
    Test the initialisation of the iCog
    - code runs with all sub functions patched
    - code correctly loads the default config

    """
    @patch.object(iCog, '_decode_calib_data')
    @patch.object(iCog, '_setup_sensor')
    def test_init_good_path(self, mock_setup, mock_decode):
        """
        Test the initalisation returns the object correctly
        """
        gbl_log.info("[TEST] test_init_good_path")

        test_config = [[0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]]
        comms = MagicMock()
        mock_decode.return_value = True
        mock_setup.return_value = True
        test_icog = iCog(comms,test_config)
        self.assertIsInstance(test_icog, object)

    @patch.object(iCog, '_decode_calib_data')
    @patch.object(iCog, '_setup_sensor')
    def test_init_decode_fails(self, mock_setup, mock_decode):
        """
        Test that if default fails to load initially, it suceeds second time
        """
        gbl_log.info("[TEST] test_init_decode_fails")
        test_config = [[0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]]
        comms = MagicMock()
        mock_decode.side_effect = [False, True]
        mock_setup.return_value = True
        test_icog = iCog(comms,test_config)
        self.assertIsInstance(test_icog, object)

    @patch.object(iCog, '_decode_calib_data')
    @patch.object(iCog, '_setup_sensor')
    def test_init_decode_fails_twice(self, mock_setup, mock_decode):
        """
        Test that if default fails to load initially, it also fails the second time
        """
        gbl_log.info("[TEST] test_init_decode_fails_twice")
        test_config = [[0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]]
        comms = MagicMock()
        mock_decode.side_effect = [False,False]
        mock_setup.return_value = True
        with self.assertRaises(SystemExit):
            test_icog = iCog(comms,test_config)

class TestiCogConfig(unittest.TestCase):
    """
    Test the default and specific config setup.
    """
    @patch.object(iCog, '_decode_calib_data')
    @patch.object(iCog, '_setup_sensor')
    def setUp(self,mock_setup, mock_decode):
        """
        Test the initalisation returns the object correctly
        """
        gbl_log.info("[TEST] TestiCogConfig.Setup")

        test_config = [[0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]]
        self.comms = MagicMock()
        mock_decode.return_value = True
        mock_setup.return_value = True
        self.test_icog = iCog(self.comms,test_config)

    def tearDown(self):
        """
        Clean up after testing
        """
        gbl_log.info("[TEST] TestiCogConfig.Destroy")
        self.comms.destroy()

    @patch('builtins.input')
    def test_set_standard_config_good(self, mock_kbd):
        """
        Check it works with valid values
        """
        gbl_log.info("[TEST] test_set_standard_config_good")

        mock_kbd.side_effect = ['Y', '10']
        self.test_icog._set_standard_config()
        config = self.test_icog.ReturnCalibrationData()
        gbl_log.debug("[TEST] Configuration Generated:\n%s" % config)
        self.assertTrue(len(config)>0, msg="Configuration Data Missing")
        self.assertTrue(config['low_power_mode'])
        self.assertTrue(config['read_frequency'] == 10)



#TODO: Write some tests that use the comms handler and patch the smbus
def SetupLogging():
    """
    Setup the logging defaults
    Using the logger function to span multiple files.
    """
    global gbl_log

    log_cfg = dict(
        version = 1,
        formatters = {
            'full': {'format':
                  '%(asctime)s - %(levelname)-8s - %(message)s',
                  },
            },
        handlers = {
            'file': {'class': 'logging.handlers.RotatingFileHandler',
                    'formatter': 'full',
                    'level': logging.DEBUG,
                    'filename': 'CognIoT.log',
                    'mode': 'w'},
            },
        root = {
            'handlers': ['file'],
            'level': logging.DEBUG,
            },
            )

    # Create a logger with the name of the function
    logging.config.dictConfig(log_cfg)
    gbl_log = logging.getLogger()

    gbl_log.info("File Logging Started, current level is %s" % gbl_log.getEffectiveLevel)

    return


if __name__ == '__main__':
    SetupLogging()

    gbl_log.critical("\n\n     [TEST] i2c test comms started\n\n")

    unittest.main()

